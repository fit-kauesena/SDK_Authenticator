package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.camera.CameraPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin camera_android, io.flutter.plugins.camera.CameraPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.combateafraude.document_detector.DocumentDetectorPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin document_detector, com.combateafraude.document_detector.DocumentDetectorPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.combateafraude.face_authenticator.FaceAuthenticatorPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin face_authenticator, com.combateafraude.face_authenticator.FaceAuthenticatorPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin flutter_plugin_android_lifecycle, io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.combateafraude.passive_face_liveness.PassiveFaceLivenessPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin passive_face_liveness, com.combateafraude.passive_face_liveness.PassiveFaceLivenessPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.baseflow.permissionhandler.PermissionHandlerPlugin());
    } catch(Exception e) {
      Log.e(TAG, "Error registering plugin permission_handler_android, com.baseflow.permissionhandler.PermissionHandlerPlugin", e);
    }
  }
}
